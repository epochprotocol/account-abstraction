/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type UserOperationStruct = {
  sender: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  initCode: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
  callGasLimit: PromiseOrValue<BigNumberish>;
  verificationGasLimit: PromiseOrValue<BigNumberish>;
  preVerificationGas: PromiseOrValue<BigNumberish>;
  maxFeePerGas: PromiseOrValue<BigNumberish>;
  maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;
  paymasterAndData: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export declare namespace IEpochRegistry {
  export type DataSourceStruct = {
    useDataSource: PromiseOrValue<boolean>;
    dataPosition: PromiseOrValue<BigNumberish>;
    positionInCallData: PromiseOrValue<BigNumberish>;
    dataSource: PromiseOrValue<string>;
    encodedQuery: PromiseOrValue<BytesLike>;
  };

  export type DataSourceStructOutput = [
    boolean,
    number,
    number,
    string,
    string
  ] & {
    useDataSource: boolean;
    dataPosition: number;
    positionInCallData: number;
    dataSource: string;
    encodedQuery: string;
  };

  export type ExecutionWindowStruct = {
    useExecutionWindow: PromiseOrValue<boolean>;
    recurring: PromiseOrValue<boolean>;
    recurrenceGap: PromiseOrValue<BigNumberish>;
    executionWindowStart: PromiseOrValue<BigNumberish>;
    executionWindowEnd: PromiseOrValue<BigNumberish>;
  };

  export type ExecutionWindowStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    useExecutionWindow: boolean;
    recurring: boolean;
    recurrenceGap: BigNumber;
    executionWindowStart: BigNumber;
    executionWindowEnd: BigNumber;
  };

  export type OnChainConditionStruct = {
    useOnChainCondition: PromiseOrValue<boolean>;
    dataPosition: PromiseOrValue<BigNumberish>;
    dataSource: PromiseOrValue<string>;
    conditionChecker: PromiseOrValue<string>;
    dataType: PromiseOrValue<BigNumberish>;
    encodedQuery: PromiseOrValue<BytesLike>;
    encodedCondition: PromiseOrValue<BytesLike>;
  };

  export type OnChainConditionStructOutput = [
    boolean,
    number,
    string,
    string,
    number,
    string,
    string
  ] & {
    useOnChainCondition: boolean;
    dataPosition: number;
    dataSource: string;
    conditionChecker: string;
    dataType: number;
    encodedQuery: string;
    encodedCondition: string;
  };

  export type TaskStruct = {
    taskId: PromiseOrValue<BigNumberish>;
    isBatchTransaction: PromiseOrValue<boolean>;
    taskOwner: PromiseOrValue<string>;
    destination: PromiseOrValue<string>;
    timeConditionId: PromiseOrValue<BigNumberish>;
    onChainConditionId: PromiseOrValue<BigNumberish>;
    dataSourceId: PromiseOrValue<BigNumberish>;
    destinations: PromiseOrValue<string>[];
  };

  export type TaskStructOutput = [
    BigNumber,
    boolean,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    taskId: BigNumber;
    isBatchTransaction: boolean;
    taskOwner: string;
    destination: string;
    timeConditionId: BigNumber;
    onChainConditionId: BigNumber;
    dataSourceId: BigNumber;
    destinations: string[];
  };
}

export interface EpochRegistryInterface extends utils.Interface {
  functions: {
    "addTask(address,bool,(bool,bool,uint64,uint64,uint64),(bool,uint32,address,address,uint8,bytes,bytes),(bool,uint32,uint32,address,bytes),address[])": FunctionFragment;
    "dataSourceMapping(uint256)": FunctionFragment;
    "deleteTask(uint256)": FunctionFragment;
    "executionWindowMapping(uint256)": FunctionFragment;
    "onChainConditionMapping(uint256)": FunctionFragment;
    "processBatchTransaction(uint256,address[],uint256[],bytes[])": FunctionFragment;
    "processTransaction(uint256,address,uint256,bytes)": FunctionFragment;
    "taskDeleted(uint256)": FunctionFragment;
    "taskMapping(uint256)": FunctionFragment;
    "taskStatus(uint256)": FunctionFragment;
    "verifyTransaction(uint256,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTask"
      | "dataSourceMapping"
      | "deleteTask"
      | "executionWindowMapping"
      | "onChainConditionMapping"
      | "processBatchTransaction"
      | "processTransaction"
      | "taskDeleted"
      | "taskMapping"
      | "taskStatus"
      | "verifyTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTask",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      IEpochRegistry.ExecutionWindowStruct,
      IEpochRegistry.OnChainConditionStruct,
      IEpochRegistry.DataSourceStruct,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dataSourceMapping",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTask",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executionWindowMapping",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onChainConditionMapping",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "processBatchTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taskDeleted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taskMapping",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taskStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTransaction",
    values: [PromiseOrValue<BigNumberish>, UserOperationStruct]
  ): string;

  decodeFunctionResult(functionFragment: "addTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataSourceMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executionWindowMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onChainConditionMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processBatchTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskDeleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taskMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taskStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTransaction",
    data: BytesLike
  ): Result;

  events: {
    "NewDataSource(uint256,tuple)": EventFragment;
    "NewExecutionWindow(uint256,tuple)": EventFragment;
    "NewOnChainCondition(uint256,tuple)": EventFragment;
    "NewTask(tuple)": EventFragment;
    "TaskDeleted(tuple)": EventFragment;
    "TaskProcessed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewDataSource"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExecutionWindow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOnChainCondition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTask"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskProcessed"): EventFragment;
}

export interface NewDataSourceEventObject {
  id: BigNumber;
  dataSource: IEpochRegistry.DataSourceStructOutput;
}
export type NewDataSourceEvent = TypedEvent<
  [BigNumber, IEpochRegistry.DataSourceStructOutput],
  NewDataSourceEventObject
>;

export type NewDataSourceEventFilter = TypedEventFilter<NewDataSourceEvent>;

export interface NewExecutionWindowEventObject {
  id: BigNumber;
  window: IEpochRegistry.ExecutionWindowStructOutput;
}
export type NewExecutionWindowEvent = TypedEvent<
  [BigNumber, IEpochRegistry.ExecutionWindowStructOutput],
  NewExecutionWindowEventObject
>;

export type NewExecutionWindowEventFilter =
  TypedEventFilter<NewExecutionWindowEvent>;

export interface NewOnChainConditionEventObject {
  id: BigNumber;
  condition: IEpochRegistry.OnChainConditionStructOutput;
}
export type NewOnChainConditionEvent = TypedEvent<
  [BigNumber, IEpochRegistry.OnChainConditionStructOutput],
  NewOnChainConditionEventObject
>;

export type NewOnChainConditionEventFilter =
  TypedEventFilter<NewOnChainConditionEvent>;

export interface NewTaskEventObject {
  task: IEpochRegistry.TaskStructOutput;
}
export type NewTaskEvent = TypedEvent<
  [IEpochRegistry.TaskStructOutput],
  NewTaskEventObject
>;

export type NewTaskEventFilter = TypedEventFilter<NewTaskEvent>;

export interface TaskDeletedEventObject {
  task: IEpochRegistry.TaskStructOutput;
}
export type TaskDeletedEvent = TypedEvent<
  [IEpochRegistry.TaskStructOutput],
  TaskDeletedEventObject
>;

export type TaskDeletedEventFilter = TypedEventFilter<TaskDeletedEvent>;

export interface TaskProcessedEventObject {
  id: BigNumber;
}
export type TaskProcessedEvent = TypedEvent<
  [BigNumber],
  TaskProcessedEventObject
>;

export type TaskProcessedEventFilter = TypedEventFilter<TaskProcessedEvent>;

export interface EpochRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EpochRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTask(
      destination: PromiseOrValue<string>,
      isBatchTransaction: PromiseOrValue<boolean>,
      executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
      onChainCondition: IEpochRegistry.OnChainConditionStruct,
      dataSource: IEpochRegistry.DataSourceStruct,
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dataSourceMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, string, string] & {
        useDataSource: boolean;
        dataPosition: number;
        positionInCallData: number;
        dataSource: string;
        encodedQuery: string;
      }
    >;

    deleteTask(
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executionWindowMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber] & {
        useExecutionWindow: boolean;
        recurring: boolean;
        recurrenceGap: BigNumber;
        executionWindowStart: BigNumber;
        executionWindowEnd: BigNumber;
      }
    >;

    onChainConditionMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string, string, number, string, string] & {
        useOnChainCondition: boolean;
        dataPosition: number;
        dataSource: string;
        conditionChecker: string;
        dataType: number;
        encodedQuery: string;
        encodedCondition: string;
      }
    >;

    processBatchTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taskDeleted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    taskMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string, string, BigNumber, BigNumber, BigNumber] & {
        taskId: BigNumber;
        isBatchTransaction: boolean;
        taskOwner: string;
        destination: string;
        timeConditionId: BigNumber;
        onChainConditionId: BigNumber;
        dataSourceId: BigNumber;
      }
    >;

    taskStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      userOperation: UserOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addTask(
    destination: PromiseOrValue<string>,
    isBatchTransaction: PromiseOrValue<boolean>,
    executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
    onChainCondition: IEpochRegistry.OnChainConditionStruct,
    dataSource: IEpochRegistry.DataSourceStruct,
    destinations: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dataSourceMapping(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, number, string, string] & {
      useDataSource: boolean;
      dataPosition: number;
      positionInCallData: number;
      dataSource: string;
      encodedQuery: string;
    }
  >;

  deleteTask(
    taskId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executionWindowMapping(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, BigNumber] & {
      useExecutionWindow: boolean;
      recurring: boolean;
      recurrenceGap: BigNumber;
      executionWindowStart: BigNumber;
      executionWindowEnd: BigNumber;
    }
  >;

  onChainConditionMapping(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, string, string, number, string, string] & {
      useOnChainCondition: boolean;
      dataPosition: number;
      dataSource: string;
      conditionChecker: string;
      dataType: number;
      encodedQuery: string;
      encodedCondition: string;
    }
  >;

  processBatchTransaction(
    taskId: PromiseOrValue<BigNumberish>,
    dest: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    func: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processTransaction(
    taskId: PromiseOrValue<BigNumberish>,
    dest: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    func: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taskDeleted(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  taskMapping(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, string, string, BigNumber, BigNumber, BigNumber] & {
      taskId: BigNumber;
      isBatchTransaction: boolean;
      taskOwner: string;
      destination: string;
      timeConditionId: BigNumber;
      onChainConditionId: BigNumber;
      dataSourceId: BigNumber;
    }
  >;

  taskStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyTransaction(
    taskId: PromiseOrValue<BigNumberish>,
    userOperation: UserOperationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTask(
      destination: PromiseOrValue<string>,
      isBatchTransaction: PromiseOrValue<boolean>,
      executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
      onChainCondition: IEpochRegistry.OnChainConditionStruct,
      dataSource: IEpochRegistry.DataSourceStruct,
      destinations: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataSourceMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, number, string, string] & {
        useDataSource: boolean;
        dataPosition: number;
        positionInCallData: number;
        dataSource: string;
        encodedQuery: string;
      }
    >;

    deleteTask(
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executionWindowMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, BigNumber] & {
        useExecutionWindow: boolean;
        recurring: boolean;
        recurrenceGap: BigNumber;
        executionWindowStart: BigNumber;
        executionWindowEnd: BigNumber;
      }
    >;

    onChainConditionMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, string, string, number, string, string] & {
        useOnChainCondition: boolean;
        dataPosition: number;
        dataSource: string;
        conditionChecker: string;
        dataType: number;
        encodedQuery: string;
        encodedCondition: string;
      }
    >;

    processBatchTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[], BigNumber[], string[]] & {
        _send: boolean;
        _dest: string[];
        _values: BigNumber[];
        _func: string[];
      }
    >;

    processTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string] & {
        _send: boolean;
        _dest: string;
        _value: BigNumber;
        _func: string;
      }
    >;

    taskDeleted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taskMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string, string, BigNumber, BigNumber, BigNumber] & {
        taskId: BigNumber;
        isBatchTransaction: boolean;
        taskOwner: string;
        destination: string;
        timeConditionId: BigNumber;
        onChainConditionId: BigNumber;
        dataSourceId: BigNumber;
      }
    >;

    taskStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      userOperation: UserOperationStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewDataSource(uint256,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      dataSource?: null
    ): NewDataSourceEventFilter;
    NewDataSource(
      id?: PromiseOrValue<BigNumberish> | null,
      dataSource?: null
    ): NewDataSourceEventFilter;

    "NewExecutionWindow(uint256,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      window?: null
    ): NewExecutionWindowEventFilter;
    NewExecutionWindow(
      id?: PromiseOrValue<BigNumberish> | null,
      window?: null
    ): NewExecutionWindowEventFilter;

    "NewOnChainCondition(uint256,tuple)"(
      id?: PromiseOrValue<BigNumberish> | null,
      condition?: null
    ): NewOnChainConditionEventFilter;
    NewOnChainCondition(
      id?: PromiseOrValue<BigNumberish> | null,
      condition?: null
    ): NewOnChainConditionEventFilter;

    "NewTask(tuple)"(task?: null): NewTaskEventFilter;
    NewTask(task?: null): NewTaskEventFilter;

    "TaskDeleted(tuple)"(task?: null): TaskDeletedEventFilter;
    TaskDeleted(task?: null): TaskDeletedEventFilter;

    "TaskProcessed(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): TaskProcessedEventFilter;
    TaskProcessed(
      id?: PromiseOrValue<BigNumberish> | null
    ): TaskProcessedEventFilter;
  };

  estimateGas: {
    addTask(
      destination: PromiseOrValue<string>,
      isBatchTransaction: PromiseOrValue<boolean>,
      executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
      onChainCondition: IEpochRegistry.OnChainConditionStruct,
      dataSource: IEpochRegistry.DataSourceStruct,
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dataSourceMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteTask(
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executionWindowMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onChainConditionMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processBatchTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taskDeleted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      userOperation: UserOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTask(
      destination: PromiseOrValue<string>,
      isBatchTransaction: PromiseOrValue<boolean>,
      executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
      onChainCondition: IEpochRegistry.OnChainConditionStruct,
      dataSource: IEpochRegistry.DataSourceStruct,
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dataSourceMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteTask(
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executionWindowMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onChainConditionMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processBatchTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taskDeleted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taskMapping(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taskStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      userOperation: UserOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
