/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type UserOperationStruct = {
  sender: PromiseOrValue<string>;
  nonce: PromiseOrValue<BigNumberish>;
  initCode: PromiseOrValue<BytesLike>;
  callData: PromiseOrValue<BytesLike>;
  callGasLimit: PromiseOrValue<BigNumberish>;
  verificationGasLimit: PromiseOrValue<BigNumberish>;
  preVerificationGas: PromiseOrValue<BigNumberish>;
  maxFeePerGas: PromiseOrValue<BigNumberish>;
  maxPriorityFeePerGas: PromiseOrValue<BigNumberish>;
  paymasterAndData: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type UserOperationStructOutput = [
  string,
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  sender: string;
  nonce: BigNumber;
  initCode: string;
  callData: string;
  callGasLimit: BigNumber;
  verificationGasLimit: BigNumber;
  preVerificationGas: BigNumber;
  maxFeePerGas: BigNumber;
  maxPriorityFeePerGas: BigNumber;
  paymasterAndData: string;
  signature: string;
};

export declare namespace IEpochRegistry {
  export type ExecutionWindowStruct = {
    useExecutionWindow: PromiseOrValue<boolean>;
    recurring: PromiseOrValue<boolean>;
    recurrenceGap: PromiseOrValue<BigNumberish>;
    executionWindowStart: PromiseOrValue<BigNumberish>;
    executionWindowEnd: PromiseOrValue<BigNumberish>;
  };

  export type ExecutionWindowStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    useExecutionWindow: boolean;
    recurring: boolean;
    recurrenceGap: BigNumber;
    executionWindowStart: BigNumber;
    executionWindowEnd: BigNumber;
  };

  export type OnChainConditionStruct = {
    useOnChainCondition: PromiseOrValue<boolean>;
    dataPosition: PromiseOrValue<BigNumberish>;
    dataSource: PromiseOrValue<string>;
    conditionChecker: PromiseOrValue<string>;
    dataType: PromiseOrValue<BigNumberish>;
    encodedQuery: PromiseOrValue<BytesLike>;
    encodedCondition: PromiseOrValue<BytesLike>;
  };

  export type OnChainConditionStructOutput = [
    boolean,
    number,
    string,
    string,
    number,
    string,
    string
  ] & {
    useOnChainCondition: boolean;
    dataPosition: number;
    dataSource: string;
    conditionChecker: string;
    dataType: number;
    encodedQuery: string;
    encodedCondition: string;
  };

  export type DataSourceStruct = {
    useDataSource: PromiseOrValue<boolean>;
    dataPosition: PromiseOrValue<BigNumberish>;
    positionInCallData: PromiseOrValue<BigNumberish>;
    dataSource: PromiseOrValue<string>;
    encodedQuery: PromiseOrValue<BytesLike>;
  };

  export type DataSourceStructOutput = [
    boolean,
    number,
    number,
    string,
    string
  ] & {
    useDataSource: boolean;
    dataPosition: number;
    positionInCallData: number;
    dataSource: string;
    encodedQuery: string;
  };
}

export interface IEpochRegistryInterface extends utils.Interface {
  functions: {
    "addTask(address,bool,(bool,bool,uint64,uint64,uint64),(bool,uint32,address,address,uint8,bytes,bytes),(bool,uint32,uint32,address,bytes),address[])": FunctionFragment;
    "processBatchTransaction(uint256,address[],uint256[],bytes[])": FunctionFragment;
    "processTransaction(uint256,address,uint256,bytes)": FunctionFragment;
    "taskStatus(uint256)": FunctionFragment;
    "verifyTransaction(uint256,(address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTask"
      | "processBatchTransaction"
      | "processTransaction"
      | "taskStatus"
      | "verifyTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTask",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      IEpochRegistry.ExecutionWindowStruct,
      IEpochRegistry.OnChainConditionStruct,
      IEpochRegistry.DataSourceStruct,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processBatchTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processTransaction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taskStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTransaction",
    values: [PromiseOrValue<BigNumberish>, UserOperationStruct]
  ): string;

  decodeFunctionResult(functionFragment: "addTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processBatchTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taskStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyTransaction",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IEpochRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IEpochRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTask(
      destination: PromiseOrValue<string>,
      isBatchTransaction: PromiseOrValue<boolean>,
      executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
      onChainCondition: IEpochRegistry.OnChainConditionStruct,
      dataSource: IEpochRegistry.DataSourceStruct,
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processBatchTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    processTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taskStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      userOperation: UserOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addTask(
    destination: PromiseOrValue<string>,
    isBatchTransaction: PromiseOrValue<boolean>,
    executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
    onChainCondition: IEpochRegistry.OnChainConditionStruct,
    dataSource: IEpochRegistry.DataSourceStruct,
    destinations: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processBatchTransaction(
    taskId: PromiseOrValue<BigNumberish>,
    dest: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    func: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  processTransaction(
    taskId: PromiseOrValue<BigNumberish>,
    dest: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    func: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taskStatus(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyTransaction(
    taskId: PromiseOrValue<BigNumberish>,
    userOperation: UserOperationStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addTask(
      destination: PromiseOrValue<string>,
      isBatchTransaction: PromiseOrValue<boolean>,
      executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
      onChainCondition: IEpochRegistry.OnChainConditionStruct,
      dataSource: IEpochRegistry.DataSourceStruct,
      destinations: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processBatchTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, string[], BigNumber[], string[]] & {
        _send: boolean;
        _dest: string[];
        _values: BigNumber[];
        _func: string[];
      }
    >;

    processTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string] & {
        _send: boolean;
        _dest: string;
        _value: BigNumber;
        _func: string;
      }
    >;

    taskStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      userOperation: UserOperationStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addTask(
      destination: PromiseOrValue<string>,
      isBatchTransaction: PromiseOrValue<boolean>,
      executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
      onChainCondition: IEpochRegistry.OnChainConditionStruct,
      dataSource: IEpochRegistry.DataSourceStruct,
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processBatchTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    processTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taskStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      userOperation: UserOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTask(
      destination: PromiseOrValue<string>,
      isBatchTransaction: PromiseOrValue<boolean>,
      executionWindowCondition: IEpochRegistry.ExecutionWindowStruct,
      onChainCondition: IEpochRegistry.OnChainConditionStruct,
      dataSource: IEpochRegistry.DataSourceStruct,
      destinations: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processBatchTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      func: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    processTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      dest: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      func: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taskStatus(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyTransaction(
      taskId: PromiseOrValue<BigNumberish>,
      userOperation: UserOperationStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
