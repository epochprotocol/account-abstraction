/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IEpochRegistry,
  IEpochRegistryInterface,
} from "../../../../contracts/flattened/EpochRegistry.sol/IEpochRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "destination",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isBatchTransaction",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "useExecutionWindow",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "recurring",
            type: "bool",
          },
          {
            internalType: "uint64",
            name: "recurrenceGap",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "executionWindowStart",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "executionWindowEnd",
            type: "uint64",
          },
        ],
        internalType: "struct IEpochRegistry.ExecutionWindow",
        name: "executionWindowCondition",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "useOnChainCondition",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "dataPosition",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "dataSource",
            type: "address",
          },
          {
            internalType: "contract IConditionChecker",
            name: "conditionChecker",
            type: "address",
          },
          {
            internalType: "enum IEpochRegistry.DataType",
            name: "dataType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "encodedQuery",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "encodedCondition",
            type: "bytes",
          },
        ],
        internalType: "struct IEpochRegistry.OnChainCondition",
        name: "onChainCondition",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "useDataSource",
            type: "bool",
          },
          {
            internalType: "uint32",
            name: "dataPosition",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "positionInCallData",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "dataSource",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "encodedQuery",
            type: "bytes",
          },
        ],
        internalType: "struct IEpochRegistry.DataSource",
        name: "dataSource",
        type: "tuple",
      },
      {
        internalType: "address[]",
        name: "destinations",
        type: "address[]",
      },
    ],
    name: "addTask",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "dest",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "func",
        type: "bytes[]",
      },
    ],
    name: "processBatchTransaction",
    outputs: [
      {
        internalType: "bool",
        name: "_send",
        type: "bool",
      },
      {
        internalType: "address[]",
        name: "_dest",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_values",
        type: "uint256[]",
      },
      {
        internalType: "bytes[]",
        name: "_func",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "func",
        type: "bytes",
      },
    ],
    name: "processTransaction",
    outputs: [
      {
        internalType: "bool",
        name: "_send",
        type: "bool",
      },
      {
        internalType: "address",
        name: "_dest",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_func",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "taskStatus",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "taskId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOperation",
        type: "tuple",
      },
    ],
    name: "verifyTransaction",
    outputs: [
      {
        internalType: "bool",
        name: "_send",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IEpochRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IEpochRegistryInterface {
    return new utils.Interface(_abi) as IEpochRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IEpochRegistry {
    return new Contract(address, _abi, signerOrProvider) as IEpochRegistry;
  }
}
